---------------------------------------------------------------------------------
--This is the beginning of a new search with new data pulled into SQLiteStudios--
---------------------------------------------------------------------------------
--                       Spotify top 50 Songs in 2021                          --
---------------------------------------------------------------------------------

--Download of Spotity data from Kaggle. https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021?select=spotify_top50_2021.csv
--Steps for creating working table into SQLiteStudios

--#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Once done creating the table insert Spotify Data .csv into SQLiteStudios.
--Made first exploration into the data using the following SQL.

--#1. Looking to see the overall columns with limiting factors.

SELECT * 
FROM BIT_DB.Spotifydata
LIMIT 3

--#2. Grouping artist name & track name together.

SELECT *
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

--#3. Looking to see who the top 10 artists are by popularity
SELECT artist_name, track_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10

--#4. Looking for the avg popularity, danceability, and energy by artist and track. 
SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name
ORDER BY avg(popularity) desc



