--#In this SQL code, I'm querying a database that's holding Nexflix data to answer questions about the data. 
--This data dive was done using SQLiteStudios pulling the data into it and then searching.

--#1. How many movie titles are there in the database? (movies only, not tv shows) 
--As you can see from the select you are doing a open count of everything. 
--From is showing the data base along with netflix each is surrounded with double "" and a "." between them to distinguish between the two of them.
--WHERE is showing the type of "Movie"

SELECT count(*) 
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info"
WHERE type='Movie';

--#2. When was the most recent batch of tv shows and/or movies added to the database? 
--As you can see from the select you are using MAX breaking it down by (date(date_added)). 
--From is showing the data base along with netflix each is surrounded with double "" and a "." between them to distinguish between the two of them.

SELECT max(date(date_added))
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info";

--#3. List all the movies and tv shows in alphabetical order. 
--As you can see from the select you are seaching by title. 
--From is showing the data base along with netflix each is surrounded with double "" and a "." between them to distinguish between the two of them.
--ORDER BY is showing the type of "title" in ascending order.

SELECT title
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info"
ORDER BY title asc;

--#4. Who was the Director for the movie Bright Star? 
--As you can see from the SELECT you are seaching by director. 
--FROM is showing the data base along with netflix each is surrounded with double "" and a "." between them to distinguish between the two of them. 
--If you look at the end of "netflix_titles_info" you will see TITLES this is shortening "netflix_titles_info" to titles.
--LEFT JOIN giving you where to JOIN and then using the ON to show what to LEFT JOIN 
--If you look at the end of "netflix_people" you will see PEOPLE this is shortening "netflix_people" to people.
--ON is showing you connecting tables in the JOIN with titles.show_id=people.show_id
--WHERE is showing what you are looking for in titles.title='Bright Star' with titles being the place and title='Bright Star' what you are looking for.

SELECT director
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info" titles
LEFT JOIN  "CharlotteChaze/BreakIntoTech"."netflix_people" people
ON titles.show_id=people.show_id
WHERE titles.title='Bright Star'

--#5. What is the oldest movie in the database and what year was it made? 
--As you can see from the SELECT you are seaching by title and because you are looking for the oldest year you would look for the lowest number min(release_year). 
--FROM is showing the data base along with netflix each is surrounded with double "" and a "." between them to distinguish between the two of them. 
--WHERE is showing what you are looking for by type with type='Movie' being the place that you are looking.
--GROUP BY shows that you are wanting title, release_year together.
--ORDER BY shows that you want release_year in ascending order.
--LIMIT shows that you are only wanting x number shown on your search.

SELECT title, min(release_year) 
FROM "CharlotteChaze/BreakIntoTech"."netflix_titles_info"
WHERE type='Movie'
GROUP BY title, release_year
ORDER BY release_year asc
LIMIT 1;

---------------------------------------------------------------------------------
--This is the beginning of a new search with new data pulled into SQLiteStudios--
---------------------------------------------------------------------------------

--##1. This shows a range of what you are looking for and the time and date to look between.
--SELECT As you can see from the SELECT you are seaching orderdate. 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a range using between giving date, time AND date, time again which shows the range you are looking between.

SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00'

--##2. This shows location of what you are looking for with the time and date that you are looking for. 
--SELECT As you can see from the SELECT you are seaching orderdate. 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a range using between giving date, time AND date, time again which shows the range you are looking between.

SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35'

--##3. Search for the quantity of sales on a given date.
--SELECT As you can see from the SELECT you are seaching sum(quantity). 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a orderdate, 'like' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.

SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate like '02/18/19%'

--##4. Search for the Product Batteries
--SELECT DISTINCT statement is used to return only differenct values as you can see from the SELECT you are seaching Product. 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a Product, 'like' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.

SELECT DISTINCT Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%'

--##5. Search for Product and Price.
--SELECT DISTINCT statement is used to return only differenct values as you can see from the SELECT you are seaching Product and Price. 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a Price, 'like' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.

SELECT DISTINCT Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99'

--##6. Search for Product and Quantity of item.
--SELECT As you can see from the SELECT you are seaching Product and sum(quantity). 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a location, 'like' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.
--GROUP BY statement groups rows that have the same values into summary rows for the Product

SELECT Product, SUM(quantity)
FROM BIT_DB.FebSales 
WHERE location like '%Los Angeles%'
GROUP BY Product

---------------------------------------------------------------------------------
--This is the beginning of a new search with new data pulled into SQLiteStudios--
---------------------------------------------------------------------------------

--###1. Which locations in New York received at least 3 orders in January, and how many orders did they each receive?
--SELECT DISTINCT statement is used to return only differenct values as you can see from the SELECT you are seaching location and you are wanting count(orderID). 
--FROM is showing the data base along with JanSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a location, 'LIKE' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.
--GROUP BY statement groups rows that have the same values into summary rows for the location
--HAVING was used because WHERE can not be used, HAVING COUNT (orderID) > 2, so the (orderID) is looking for anything less then 2 in this example. 

SELECT DISTINCT location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%NY%'
GROUP BY location
HAVING COUNT(orderID)>2

--###2. How many of each type of headphone was sold in February?
--SELECT As you can see from the SELECT you are seaching for sum(quantity) as quantity. 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder.
--WHERE is showing what you are looking for by type with a location, 'like' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.
--GROUP BY statement groups rows that have the same values into summary rows for the Product

SELECT sum(Quantity) as quantity,
Product
FROM BIT_DB.FebSales 
WHERE Product LIKE '%Headphones%'
GROUP BY Product

--###3. What was the average amount spent per account in February?
--SELECT As you can see from the SELECT you are seaching sum(quantity*price)/count(cust.acctnum) in doing this you are taking the quantity * price,
--with count(quantity.acctnum) divided. 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--LEFT JOIN giving you where to JOIN and then using the ON to show what to LEFT JOIN 
--If you look at the end of "BIT_DB.customers cust" you will see CUST this is shortening "BIT_DB.customers" to cust.
--ON is showing you connecting tables in the JOIN with FEB.orderid=cust.order_id

SELECT sum(quantity*price)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

# OR # 

SELECT avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

--###4. What was the average quantity of products purchased per account in February? 
--SELECT As you can see from the SELECT you are seaching Product and sum(quantity). 
--FROM is showing the data base along with FebSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a location, 'like' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.
--GROUP BY statement groups rows that have the same values into summary rows for the Product

select sum(quantity)/count(cust.acctnum)
FROM BIT_DB.FebSales Feb

LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id

--###5. Which product brought in the most revenue in January and how much revenue did it bring in total? 
--SELECT As you can see from the SELECT you are seaching Product and sum(quantity). 
--FROM is showing the data base along with JanSales each is distinguished with a "." between them to show the data base and then the folder. 
--WHERE is showing what you are looking for by type with a location, 'like' searches the column you give it for the values you type in after like.
--'%' tells the SQL code that you are searching for a value that can match anything no matter the hour of min attached to it.
--GROUP BY statement groups rows that have the same values into summary rows for the Product

SELECT product, sum(quantity*price)
FROM BIT_DB.JanSales 
GROUP BY product
ORDER BY sum(quantity*price) desc 
LIMIT 1
